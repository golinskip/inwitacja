<?php
namespace InvitationBundle\Repository;

use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
/**
 * InvitationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvitationRepository extends \Doctrine\ORM\EntityRepository implements UserProviderInterface {
    
    public function loadUserByUsername($username) {
        
        $invitationParts = explode('@', $username);
        
        if(count($invitationParts) != 2) {
            throw new UsernameNotFoundException('No user found for username '.$username);
        }
        
        $Event = $this->getEntityManager()
            ->getRepository('InvitationBundle:Event')
            ->findOneByUrlName($invitationParts[1]);
        
        if($Event == null) {
            throw new UsernameNotFoundException('No user found for username '.$username);
        }
        
        $Invitation = $this->findOneBy([
            'Event' => $Event,
            'code' => $invitationParts[0],
        ]);
        
        if (!$Invitation) {
            throw new UsernameNotFoundException('No user found for username '.$username);
        }
        
        return $Invitation;
    }

    public function refreshUser(UserInterface  $user) {
        if (!$user instanceof Invitation) {
            throw new UnsupportedUserException(
                sprintf('Instances of "%s" are not supported.', get_class($user))
            );
        }
        
        return $this->loadUserByUsername($user->getUsername());
    }

    public function supportsClass($class) {
        return Invitation::class === $class;
    }
}
